sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
helpText("This app was created to help automate the process of creating an Agg File for GWR. If something is not performing as expected or you want to make changes to the app, please reach out to susannah.derr@analyticpartners.com."),
# Horizontal line ----
tags$hr(),
#Input: Select Calendar Lookup File
fileInput("spend","Select the .csv file that contains your spend, support and calendar mapping.",
multiple = FALSE,
accept = c("text/csv",
"text/comma-separated-values,text/plain",
".csv")),
# Horizontal line ----
tags$hr(),
# Input: Select a file ----
fileInput("decomp", "Select the decomp files that you want to aggregate and tranpose.",
multiple = TRUE,
accept = c("text/csv",
"text/comma-separated-values,text/plain",
".csv")),
checkboxGroupInput("idcols",
label = "Select Dimension Hierarchy columns to keep for your Agg File ",
choices = c('This field will update once you upload decomp files.')
),
textOutput("txt")
,
# Horizontal line ----
tags$hr(),
downloadButton('downloadData', 'Download Transformed')
),
# Main panel for displaying outputs ----
mainPanel(
#Output: Tabset w/ Raw csv and Transformed Data
tabsetPanel(type = "tabs",
tabPanel("Spend and Support",tableOutput("spend_sup")),
tabPanel("Transposed Decomps",tableOutput("pivot")),
tabPanel("Agg File Preview",tableOutput("agg_file"))
)
)
)
)
# Define server logic to read selected file ----
server <- function(input,output,session) {
#########################
##CALENDAR TAB
#########################
##CREATE REACTIVE VARIABLE THAT CONTAINS CALENDAR DATA
spend<-reactive({
if (is.null(input$spend)) {
return(NULL)
} else {
spends<-fread(input$spend$datapath,check.names = FALSE)
spends$Week <-as.Date(spends$Week,"%m/%d/%Y")
spends$Property <-str_to_lower(spends$Property)
spends
}
})
##TAB:RENDER CALENDAR FILE
output$spend_sup <- renderTable({
req(input$spend)
head(spend(),n=100)
})
#########################
##AGG FILE PREVIEW TAB
#########################
##CREATE REACTIVE VARIABLE THAT CONTAINS AGGREGATED DECOMPS
myData<-reactive({
if (is.null(input$decomp)) {
return(NULL)
} else {
data<-rbindlist(lapply(input$decomp$datapath,fread,skip = 2),use.names = TRUE,fill = TRUE)
data
}
})
##UPDATE UI
observe({
updateCheckboxGroupInput(
session,
"idcols",
choices = unique(names(myData())))
})
##SAVE UPDATED UI USER SELECTIONS
id_cols <- reactive({
if(is.null(input$idcols)) {
return(NULL)
} else {
which(unique(names(myData())) %in%(input$idcols))
}
})
##BEGIN TRANSFORMATIONS
transposed_data <- reactive({
if(is.null(input$decomp)) {
return(NULL)}
else {
df<-myData()
df<-df %>%
melt(id=c(input$idcols)) %>%
mutate(week = as.Date(week,"%m/%d/%Y"))
}
})
##RENDER TRANPOSED DECOMPS PREVIEW TAB
output$pivot<- renderTable({
req(input$decomp)
head(transposed_data(),100)
})
##JOIN TRANSPOSED DATA TO CALENDAR LOOK UP FILE
final_data <-reactive({
if(is.null(input$decomp)) {
return(NULL)}
else{
a<-transposed_data()
b<-spend()
df<-left_join(a,b,by = c("week" = "Week","property"="Property",variable = "Variable"))
}
})
##RENDER FINAL DATA JOINED
output$agg_file<-renderTable({
req(input$decomp)
head(final_data(),n=100)
})
# DOWNLOAD TRANSFORMED DATA TO CSV
output$downloadData <- downloadHandler(
filename = function() {
paste0("Agg File_",Sys.Date(),".csv", sep = "")
},
content = function(file) {
fwrite(final_data(), file, row.names = FALSE)
}
)
}
shinyApp(ui,server)
library(shiny); runApp('Z:/Admin Charlottesville/Temp/Temp - Susannah/Great Wolf Decomps/GWR Agg File Automation App.R')
runApp('Z:/Admin Charlottesville/Temp/Temp - Susannah/Great Wolf Decomps/GWR Agg File Automation App.R')
runApp('Z:/Admin Charlottesville/Temp/Temp - Susannah/Great Wolf Decomps/GWR Agg File Automation App.R')
runApp('Z:/Admin Charlottesville/Temp/Temp - Susannah/Great Wolf Decomps/GWR Agg File Automation App.R')
library(shiny); runApp('C:/Users/susannah.derr/Downloads/GWR Agg File Automation App v2.R')
runApp('C:/Users/susannah.derr/Downloads/GWR Agg File Automation App v2.R')
###########################################
##Code: GWR Agg File Automation App.R
##Project: Data Prep Portal
##Description: Basically just putting together StackR and TransposeR into 1 step for GWR decomp files.
##Author: Susannah Derr
##Date: April 30, 2018
##Last Edit: May 9,2018
############################################
rm(list = ls())
###########################################
##Code: DMA Matching Shiny v3.R
##Project: Data Prep Portal
##Description: Maps DMAs to Nielsen/IRI markets
##Author: Susannah Derr
##Date: April 18, 2018
##Last Edit: April 30,2018
############################################
##RUN THE ENTIRE CODE BELOW BY HIGHLIGHTING ALL OF THE TEXT AND HITTING CTRL + ENTER
##A WINDOW WILL POP UP IN YOUR DEFAULT BROWSER WITH THE DMA MAPPING APP
rm(list = ls())
required_packages <- c("stringr", "stringdist", "dplyr", "shiny","readr","openxlsx")
for(i in 1:length(required_packages)){
if(required_packages[i] %in% installed.packages()[,1])
{library(required_packages[i], character.only=T)}
else{install.packages(required_packages[1])
library(required_packages[i], character.only=T)}
}
dma<-read_csv("S:/R Training/dma_map.csv")
end_col<-ncol(dma)
# Define UI for data upload app ----
ui <- fluidPage(
# App title ----
titlePanel("DMA Market Mapping"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Select a file ----
fileInput("file1", "Choose CSV File With DMAs To Map",
multiple = TRUE,
accept = c("text/csv",
"text/comma-separated-values,text/plain",
".csv")),
# Horizontal line ----
tags$hr(),
# Input: Select the column that contains your DMAs ----
selectInput("dma_select",
label = "Select DMA Column",
choices = c(`Choose CSV File First` = "head")
),
# Horizontal line ----
tags$hr(),
checkboxGroupInput("mapping",
label = "Select Desired Mapping(s)",
choices = names(dma[,2:end_col])
),
textOutput("txt")
,
# Horizontal line ----
tags$hr(),
downloadButton('downloadData', 'Download Transformed')
),
# Main panel for displaying outputs ----
mainPanel(
#Output: Tabset w/ Raw csv and Transformed Data
tabsetPanel(type = "tabs",
tabPanel("Raw",tableOutput("contents")),
tabPanel("Transformed",tableOutput("transformed"))
)
)
)
)
# Define server logic to read selected file ----
server <- function(input, output,session) {
session$onSessionEnded(stopApp)
myData<-reactive({
if (is.null(input$file1)) {
return(NULL)
} else {
read_csv(input$file1$datapath)
}
})
output$contents <- renderTable({
req(input$file1)
head(myData(),100)
})
observe({
updateSelectInput(
session,
"dma_select",
choices = names(myData()))
})
map_cols <- reactive({
if(is.null(input$mapping)) {
return()
} else {
which(colnames(dma) %in%(input$mapping))
}
})
transformed_data<-reactive({
if (is.null(map_cols())) {
return("Please make sure you've uploaded an input file and selected at least one mapping.")
} else {
df<-myData()
df[[input$dma_select]] <-str_trim(df[[input$dma_select]])
df[[input$dma_select]] <-str_to_upper(df[[input$dma_select]])
df[[input$dma_select]]<-gsub("\\."," ", df[[input$dma_select]])
df[[input$dma_select]]<-gsub(",","", df[[input$dma_select]])
df[[input$dma_select]]<-gsub("-"," ",df[[input$dma_select]])
df[[input$dma_select]]<-gsub("NULL","Unknown",df[[input$dma_select]])
##UPDATE: CREATE TEMP LOOKUP FILE BEFORE MAPPING OUT
tmp_map<-as.data.frame(unique(df[[input$dma_select]]))
names(tmp_map) <-input$dma_select
#Merge the unique DMAs in your input file with the DMA mapping file to speed up merge
dma <-dma %>% select(DMA_COL, map_cols())
dat<-merge(tmp_map,dma,by=NULL)
#Take the stringdistance between original DMA column and mapping DMA column
dat$dist<-stringdist(dat$DMA_COL,dat[[input$dma_select]],method = "jw",p=0.1)
#Group by DMA and take the minimum distance, select to order columns and rename for clarity
dat <-dat %>%
group_by_(.dots=names(tmp_map)) %>%
slice(which.min(dist)) %>%
rename(transformed_dma = DMA_COL) %>%
arrange(desc(dist))%>%
select(-dist)
##Replace the DMAs that are wrongly categorized
dat$transformed_dma[dat[[input$dma_select]] == "No Metro"] <-"No Metro"
dat$transformed_dma[dat[[input$dma_select]] %in% c("(blank)","","NULL","Unknown","UNKNOWN","#N/A")] <- "UNKNOWN"
dat$transformed_dma[dat[[input$dma_select]] %in% c("Columbus-Ga","Columbus, GA")] <- "Columbus Ga (Opelika Al)"
##Replace Nielsen Food Markets
if(dma[,2] %in% input$mapping){
dat[,3][dat[[input$dma_select]] == "No Metro"] <-"No Metro"}
#dat$`Nielsen Market - Full Name`[dat[[input$dma_select]] %in% c("(blank)","","Unknown","UNKNOWN","#N/A")] <- "UNKNOWN"
#dat$`Nielsen Market - Full Name`[dat[[input$dma_select]] %in% c("Columbus-Ga","Columbus, GA")] <- "REMAINING US FOOD"}
dat
##Replace Nielsen Food abbreviations
#if ('Nielsen Market - Abbreviated' %in% input$mapping){
#dat$`Nielsen Market - Abbreviated`[dat[[input$dma_select]] == "No Metro"] <-"No Metro"
#dat$`Nielsen Market - Abbreviated`[dat[[input$dma_select]] %in% c("(blank)","","Unknown","UNKNOWN","#N/A")] <- "UNKNOWN"
#dat$`Nielsen Market - Abbreviated`[dat[[input$dma_select]] %in% c("Columbus-Ga","Columbus, GA")] <- "RUS"}
##Replace IRI Market Assignments
#if ('IRI Market - Abbreviated' %in% input$mapping){
#dat$`IRI Market - Abbreviated`[dat[[input$dma_select]] == "No Metro"] <-"No Metro"
#dat$`IRI Market - Abbreviated`[dat[[input$dma_select]] %in% c("(blank)","","Unknown","UNKNOWN","#N/A")] <- "UNKNOWN"
#dat$`IRI Market - Abbreviated`[dat[[input$dma_select]] %in% c("Columbus-Ga","Columbus, GA")] <- "RUS"}
#dat<-inner_join(df,dat,by = input$dma_select)
}
})
output$transformed <-renderTable({
req(input$file1)
transformed_data()
})
# Downloadable csv of transformed data ----
output$downloadData <- downloadHandler(
filename = function() {
paste(str_sub(input$file1,end=-5),"_dmamappeR_",Sys.Date(),".xlsx", sep = "")
},
content = function(file) {
write.xlsx(transformed_data(), file, row.names = FALSE)
}
)
}
# Create Shiny app ----
shinyApp(ui, server)
?read_csv()
setwd("Z:/Admin Charlottesville/Other/R Training") #Set your working directory to this location
##Read in the file that you want to transpose
gpse_decomp <- read.csv("CONCNC Decomp.csv",check.names = FALSE) #Read in the sample csv
str(gpse_decomp)
library(dplyr)
library(reshape2)
library(dplyr)
library(reshape2)
activity_group<-names(gpse_decomp) ##Save activity groups to a list
variable_name<-gpse_decomp[2,] ##Save variable names to a list
names(gpse_decomp)<-variable_name ##If you have multiple headers, like decomps, you have to reassign column names with the values you actually want, in this case variable names which are in the 3rd row (NOTE: R recognizes this as the 2nd row since it starts counting at 0)
gpse_decomp<-gpse_decomp[-c(1:2),] ##Then you have to remove the measure and variable rows so that you can manipulate your data
##Create a data frame of activity groups and variable names to join on to decomp once it's transposed
activity_group<-as.data.frame(activity_group) ##Create a data frame with one column for activity group
variable_name<-as.data.frame(variable_name) ##Create a data frame with one column for variable name
mapping<-cbind(activity_group,variable_name) ##Bind the columns togethe and save to a data frame called mapping.
##Transpose GPSE Decomp
gpse_transposed<-gpse_decomp %>%
melt(id.vars = c('property','channel','week')) ##What are the columns you want to keep? Put these in quotes.
##Join activity groups to GPSE Decomp by variable
final<-inner_join(gpse_transposed,mapping,by = c('variable' = 'variable_name')) %>%
select(property,channel,week,activity_group,variable,value)
activity_group<-names(gpse_decomp) ##Save activity groups to a list
variable_name<-gpse_decomp[2,] ##Save variable names to a list
names(gpse_decomp)<-variable_name ##If you have multiple headers, like decom
gpse_decomp<-gpse_decomp[-c(1:2),] ##Then you have to remove the measure and variable rows so that you can manipulate your data
##Create a data frame of activity groups and variable names to join on to decomp once it's transposed
activity_group<-as.data.frame(activity_group) ##Create a data frame with one column for activity group
variable_name<-as.data.frame(variable_name) ##Create a data frame with one column for variable name
mapping<-cbind(activity_group,variable_name) ##Bind the columns togethe and save to a data frame called mapping.
gpse_transposed<-gpse_decomp %>%
melt(id.vars = c('property','channel','week')) ##What are the columns you want to keep? Put these in quotes.
colnames(gpse_transposed)
colnames(gpse_decomp)
##Read in the file that you want to transpose
gpse_decomp <- read.csv("CONCNC Decomp.csv",check.names = FALSE) #Read in the sample csv
colnames(gpse_decomp)
str(gpse_decomp)
library(dplyr)
library(reshape2)
activity_group<-names(gpse_decomp) ##Save activity groups to a list
variable_name<-gpse_decomp[2,] ##Save variable names to a list
names(gpse_decomp)<-variable_name ##If yo
activity_group
variable_name
names(gpse_decomp)
variable_name
unique(variable_name)
variable_name<-as.data.frame(gpse_decomp[2,]) ##Save variable names to a list
names(gpse_decomp)<-variable_name ##If you have multiple headers, like decomps, you have to reassign column names with the values you actually want, in this case variable names which are in the 3rd row (NOTE: R recognizes this as the 2nd row since it starts counting at 0)
names(gpse_decomp)
rm(list = ls())
setwd("Z:/Admin Charlottesville/Other/R Training") #Set your working directory to this location
##Read in the file that you want to transpose
gpse_decomp <- read.csv("CONCNC Decomp.csv",check.names = FALSE) #Read in the sample csv
str(gpse_decomp)
library(dplyr)
library(reshape2)
activity_group<-names(gpse_decomp) ##Save activity groups to a list
variable_name<-as.data.frame(gpse_decomp[2,]) ##Save variable names to a list
variable_name
View(variable_name)
rm(list = ls())
setwd("Z:/Admin Charlottesville/Other/R Training") #Set your working directory to this location
##Read in the file that you want to transpose
gpse_decomp <- read.csv("CONCNC Decomp.csv",check.names = FALSE) #Read in the sample csv
str(gpse_decomp)
library(dplyr)
library(reshape2)
activity_group<-names(gpse_decomp) ##Save activity groups to a list
variable_name<-gpse_decomp[2,] ##Save variable names to a list
View(variable_name)
names(gpse_decomp)<-variable_name[1,] ##If you have multiple headers, like decomps, you have to reassign column names with the values you actually want, in this case variable names which are in the 3rd row (NOTE: R recognizes this as the 2nd row since it starts counting at 0)
names(gpse_decomp)
variable_name[1,]
rm(list = ls())
setwd("Z:/Admin Charlottesville/Other/R Training") #Set your working directory to this location
##Read in the file that you want to transpose
gpse_decomp <- read.csv("CONCNC Decomp.csv",check.names = FALSE) #Read in the sample csv
str(gpse_decomp)
library(dplyr)
library(reshape2)
activity_group<-names(gpse_decomp) ##Save activity groups to a list
variable_name<-gpse_decomp[2,] ##Save variable names to a list
names(gpse_decomp)<-variable_name[1,] ##If you h
names(gpse_decomp)
variable_name[1,]
rm(list = ls())
setwd("Z:/Admin Charlottesville/Other/R Training") #Set your working directory to this location
##Read in the file that you want to transpose
gpse_decomp <- read.csv("CONCNC Decomp.csv",check.names = FALSE) #Read in the sample csv
str(gpse_decomp)
library(dplyr)
library(reshape2)
activity_group<-names(gpse_decomp) ##Save activity groups to a list
head(activity_group)
variable_name<-gpse_decomp[2,] ##Save variable names to a list
head(variable_name)
View(variable_name)
names(variable_name)<-variable_name[1,]
View(variable_name)
names(variable_name)<-variable_name[2,]
View(variable_name)
names(variable_name)<-variable_name["2",]
View(variable_name)
variable_name<-as.character(unlist(gpse_decomp[2,])) ##Save variable names to a list
rm(list = ls())
setwd("Z:/Admin Charlottesville/Other/R Training") #Set your working directory to this location
##Read in the file that you want to transpose
gpse_decomp <- read.csv("CONCNC Decomp.csv",check.names = FALSE) #Read in the sample csv
str(gpse_decomp)
library(dplyr)
library(reshape2)
activity_group<-names(gpse_decomp) ##Save activity groups to a list
variable_name<-as.character(unlist(gpse_decomp[2,])) ##Save variable names to a list
View(variable_name)
names(gpse_decomp)<-variable_name ##If you have multiple headers, like decomps, you have to reassign column names with the values you actually want, in this case variable names which are in the 3rd row (NOTE: R recognizes this as the 2nd row since it starts counting at 0)
names(gpse_decomp)
rm(list = ls())
setwd("Z:/Admin Charlottesville/Other/R Training") #Set your working directory to this location
##Read in the file that you want to transpose
gpse_decomp <- read.csv("CONCNC Decomp.csv",check.names = FALSE) #Read in the sample csv
str(gpse_decomp)
library(dplyr)
library(reshape2)
activity_group<-names(gpse_decomp) ##Save activity groups to a list
variable_name<-as.character(unlist(gpse_decomp[2,])) ##Save variable names to a list
names(gpse_decomp)<-variable_name ##If you have multiple headers, like decomps, you have to reassign column names with the values you actually want, in this case variable names which are in the 3rd row (NOTE: R recognizes this as the 2nd row since it starts counting at 0)
gpse_decomp<-gpse_decomp[-c(1:2),] ##Then you have to remove the measure and variable rows so that you can manipulate your data
activity_group<-as.data.frame(activity_group) ##Create a data frame with one column for activity group
variable_name<-as.data.frame(variable_name) ##Create a data frame with one column for variable name
mapping<-cbind(activity_group,variable_name) ##Bind the columns togethe and save to a data frame called mapping.
gpse_transposed<-gpse_decomp %>%
melt(id.vars = c('property','channel','week')) ##What are the columns you want to keep? Put these in quotes.
final<-inner_join(gpse_transposed,mapping,by = c('variable' = 'variable_name')) %>%
select(property,channel,week,activity_group,variable,value)
View(final)
unique(final$activity_group)
unique(final$variable)
rm(list = ls())
setwd("Z:/Admin Charlottesville/Other/R Training") #Set your working directory to this location
##Read in the file that you want to transpose
gpse_decomp <- read.csv("CONCNC Decomp.csv",check.names = FALSE) #Read in the sample csv
str(gpse_decomp)
library(dplyr)
library(reshape2)
activity_group<-as.character(unlist(names(gpse_decomp)) ##Save activity groups to a list
variable_name<-as.character(unlist(gpse_decomp[2,])) ##Save variable names to a list
names(gpse_decomp)<-variable_name ##If you have multiple headers, like decomps, you have to reassign column names with the values you actually want, in this case variable names which are in the 3rd row (NOTE: R recognizes this as the 2nd row since it starts counting at 0)
gpse_decomp<-gpse_decomp[-c(1:2),] ##Then you have to remove the measure and variable rows so that you can manipulate your data
##Create a data frame of activity groups and variable names to join on to decomp once it's transposed
activity_group<-as.data.frame(activity_group) ##Create a data frame with one column for activity group
variable_name<-as.data.frame(variable_name) ##Create a data frame with one column for variable name
mapping<-cbind(activity_group,variable_name) ##Bind the columns togethe and save to a data frame called mapping.
##Transpose GPSE Decomp
gpse_transposed<-gpse_decomp %>%
melt(id.vars = c('property','channel','week')) ##What are the columns you want to keep? Put these in quotes.
##Join activity groups to GPSE Decomp by variable
final<-inner_join(gpse_transposed,mapping,by = c('variable' = 'variable_name')) %>%
select(property,channel,week,activity_group,variable,value)
rm(list = ls())
setwd("Z:/Admin Charlottesville/Other/R Training") #Set your working directory to this location
##Read in the file that you want to transpose
gpse_decomp <- read.csv("CONCNC Decomp.csv",check.names = FALSE) #Read in the sample csv
str(gpse_decomp)
library(dplyr)
library(reshape2)
activity_group<-as.character(unlist(names(gpse_decomp))) ##Save activity groups to a list
variable_name<-as.character(unlist(gpse_decomp[2,])) ##Save variable names to a list
names(gpse_decomp)<-variable_name ##If you have multiple headers, like decomps, you have to reassign column names with the values you actually want, in this case variable names which are in the 3rd row (NOTE: R recognizes this as the 2nd row since it starts counting at 0)
gpse_decomp<-gpse_decomp[-c(1:2),] ##Then you have to remove the measure and variable rows so that you can manipulate your data
##Create a data frame of activity groups and variable names to join on to decomp once it's transposed
activity_group<-as.data.frame(activity_group) ##Create a data frame with one column for activity group
variable_name<-as.data.frame(variable_name) ##Create a data frame with one column for variable name
mapping<-cbind(activity_group,variable_name) ##Bind the columns togethe and save to a data frame called mapping.
##Transpose GPSE Decomp
gpse_transposed<-gpse_decomp %>%
melt(id.vars = c('property','channel','week')) ##What are the columns you want to keep? Put these in quotes.
##Join activity groups to GPSE Decomp by variable
final<-inner_join(gpse_transposed,mapping,by = c('variable' = 'variable_name')) %>%
select(property,channel,week,activity_group,variable,value)
View(final)
knitr::opts_chunk$set(echo = TRUE)
setwd("Z:/Admin Charlottesville/Other/R Training") #Set your working directory to this location
##Read in the file that you want to transpose
gpse_decomp <- read.csv("CONCNC Decomp.csv",check.names = FALSE) #Read in the sample csv
kable(gpse_decomp)
setwd("Z:/Admin Charlottesville/Other/R Training")
setwd("Z:/Admin Charlottesville/Other/R Training") #Set your working directory to this location
##Read in the file that you want to transpose
gpse_decomp <- read.csv("CONCNC Decomp.csv",check.names = FALSE) #Read in the sample csv
kable(gpse_decomp)
library(knitr)
gpse_decomp <- read.csv("CONCNC Decomp.csv",check.names = FALSE)
kable(gpse_decomp)
?kable()
library(shiny); runApp('Z:/Admin Charlottesville/Temp/Temp - Susannah/Lunch and Learns/GWR Agg File Automation App.R')
runApp('P:/R Code/DMA Mapping/DMA Matching Shiny v5 - Personal.R')
runApp('P:/R Code/DMA Mapping/DMA Matching Shiny v5 - Personal.R')
runApp('P:/R Code/DMA Mapping/DMA Matching Shiny v5 - Personal.R')
runApp('P:/R Code/DMA Mapping/DMA Matching Shiny v5 - Personal.R')
runApp('P:/R Code/DMA Mapping/DMA Matching Shiny v5 - Personal.R')
runApp('P:/R Code/DMA Mapping/DMA Matching Shiny v5 - Personal.R')
runApp('P:/R Code/DMA Mapping/DMA Matching Shiny v5 - Personal.R')
runApp('P:/R Code/DMA Mapping/DMA Matching Shiny v5 - Personal.R')
runApp('P:/R Code/DMA Mapping/DMA Matching Shiny v5 - Personal.R')
runApp('P:/R Code/DMA Mapping/DMA Matching Shiny v5 - Personal.R')
runApp('P:/R Code/DMA Mapping/DMA Matching Shiny v5 - Personal.R')
runApp('P:/R Code/DMA Mapping/DMA Matching Shiny v5 - Personal.R')
runApp('P:/R Code/DMA Mapping/DMA Matching Shiny v5 - Personal.R')
